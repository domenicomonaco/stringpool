<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="spstring_8c" kind="file">
    <compoundname>spstring.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="bool_8h" local="yes">bool.h</includes>
    <includes refid="spstring_8h" local="yes">spstring.h</includes>
    <incdepgraph>
      <node id="26">
        <label>stringpool/src/spstring.c</label>
        <link refid="spstring.c"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>spstring.h</label>
        <link refid="spstring_8h"/>
      </node>
      <node id="28">
        <label>stdlib.h</label>
      </node>
      <node id="29">
        <label>bool.h</label>
        <link refid="bool_8h_source"/>
      </node>
      <node id="27">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="spstring_8c_1a840291bc02cba5474a4cb46a9b9566fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(void)</argsstring>
        <name>main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/stringpool/src/spstring.c" line="16" bodyfile="/Users/macbook/Documents/workspace-eclipse/stringpool/src/spstring.c" bodystart="16" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1a4b6d2814d9b5aa512888a91f942c8da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sp_initialize_stringpool</definition>
        <argsstring>(stringpool *sp)</argsstring>
        <name>sp_initialize_stringpool</name>
        <param>
          <type><ref refid="structstringpool" kindref="compound">stringpool</ref> *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Indirizzo alla struttura stringpool</para><para>Abbiamo solo l&apos;indirizzo</para><para>&lt; sp, allocazione di una struct stringpool all&apos;indirizzo passato </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/stringpool/src/spstring.c" line="26" bodyfile="/Users/macbook/Documents/workspace-eclipse/stringpool/src/spstring.c" bodystart="26" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1a48436fd05ac160ef79ad714a3f8e6867" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstring" kindref="compound">string</ref> *</type>
        <definition>string * sp_new_string</definition>
        <argsstring>(const char *str)</argsstring>
        <name>sp_new_string</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Crea una nuova stringa il cui contenuto è uguale a quello del parametro in ingresso str.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
<para>&lt; inizializza una struct di tipo string</para><para>Salva in new_string-&gt;allocated size la lunghezza della stringa da allocare </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/stringpool/src/spstring.c" line="44" bodyfile="/Users/macbook/Documents/workspace-eclipse/stringpool/src/spstring.c" bodystart="44" bodyend="53"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>@filename:<sp/>spstring.c</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>@author:<sp/>macbook</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>@rev:<sp/>0.1</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>@license:<sp/>GPLV2</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>@date:<sp/>16/mag/2011</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>@desc:<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;bool.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="spstring_8h" kindref="compound" tooltip="Header spstring.">spstring.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sp_initialize_stringpool(<ref refid="structstringpool" kindref="compound">stringpool</ref>*<sp/>sp){</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp<sp/>=<sp/>(<ref refid="structstringpool" kindref="compound">stringpool</ref>*)<sp/>calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structstringpool" kindref="compound">stringpool</ref>));</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>sp_new_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str){</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>new_string<sp/>=<sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*)<sp/>calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*new_string).allocated_size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(str);<sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*new_string).char_array<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>calloc((new_string.allocated_size+1),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(char));</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_string;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//string*<sp/>sp_new_string_as_struct(const<sp/>string*<sp/>str){}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//Crea<sp/>una<sp/>nuova<sp/>stringa<sp/>il<sp/>cui<sp/>contenuto<sp/>è<sp/>uguale<sp/>a<sp/>quello<sp/>del<sp/>parametro<sp/>in<sp/>ingresso<sp/>str.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//string*<sp/>sp_new_empty_string(int<sp/>len){}<sp/>//Crea<sp/>una<sp/>nuova<sp/>stringa<sp/>vuota<sp/>(cioè<sp/>“”)<sp/>creata<sp/>dinamicamente,<sp/>la<sp/>cui<sp/>dimensione<sp/>fisica<sp/>è<sp/>pari<sp/>a<sp/>len<sp/>caratteri.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//int<sp/>sp_get_allocated_size(const<sp/>string*<sp/>str){}<sp/>//Restituisce<sp/>la<sp/>dimensione<sp/>massima<sp/>(fisica)<sp/>allocata<sp/>dinamicamente<sp/>per<sp/>la<sp/>stringa.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//string*<sp/>sp_strcpy(string*<sp/>copy,<sp/>const<sp/>char*<sp/>original,<sp/>int<sp/>offset){}<sp/>//Copia<sp/>il<sp/>contenuto<sp/>della<sp/>stringa<sp/>original<sp/>in<sp/>copy,<sp/>a<sp/>partire<sp/>dal<sp/>carattere<sp/>in<sp/>posizione<sp/>offset<sp/>di<sp/>copy.<sp/>Se<sp/>offset<sp/>è<sp/>0,<sp/>allora<sp/>la<sp/>copia<sp/>avviene<sp/>dall’inizio<sp/>della<sp/>stringa<sp/>copy.<sp/>La<sp/>dimensione<sp/>di<sp/>copy<sp/>deve<sp/>essere<sp/>pari<sp/>o<sp/>maggiore<sp/>di<sp/>quella<sp/>di<sp/>original.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//void<sp/>sp_free(string*<sp/>str){}<sp/>//Funzione<sp/>per<sp/>deallocare<sp/>una<sp/>stringa<sp/>str<sp/>allocata<sp/>dinamicamente.<sp/>Dopo<sp/>la<sp/>deallocazione<sp/>str<sp/>vale<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//int<sp/>sp_strlen(const<sp/>string*<sp/>str){}<sp/>//Funzione<sp/>che<sp/>calcola<sp/>e<sp/>restituisce<sp/>la<sp/>lunghezza<sp/>logica<sp/>della<sp/>stringa<sp/>in<sp/>ingresso<sp/>str.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//boolean<sp/>sp_strcmp(const<sp/>string*<sp/>str1,<sp/>const<sp/>char*<sp/>str2){}<sp/>//Funzione<sp/>che<sp/>confronta<sp/>due<sp/>stringhe<sp/>e<sp/>restituisce<sp/>il<sp/>corrispettivo<sp/>valore<sp/>di<sp/>verità.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//string*<sp/>sp_strcat(const<sp/>char*<sp/>str1,<sp/>const<sp/>char*<sp/>str2){}<sp/>//La<sp/>funzione<sp/>crea<sp/>una<sp/>nuova<sp/>stringa<sp/>ottenuta<sp/>dalla<sp/>concatenazione<sp/>delle<sp/>due<sp/>stringhe<sp/>passate<sp/>in<sp/>ingresso,<sp/>le<sp/>quali<sp/>non<sp/>sono<sp/>alterate<sp/>dalla<sp/>funzione.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//string*<sp/>sp_strcat_as_struct(const<sp/>string*<sp/>str1,<sp/>const<sp/>string*<sp/>str2){}<sp/>//La<sp/>funzione<sp/>crea<sp/>una<sp/>nuova<sp/>stringa<sp/>ottenuta<sp/>dalla<sp/>concatenazione<sp/>delle<sp/>due<sp/>stringhe<sp/>passate<sp/>in<sp/>ingresso,<sp/>le<sp/>quali<sp/>non<sp/>sono<sp/>alterate<sp/>dalla<sp/>funzione.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//string*<sp/>sp_lower_case(const<sp/>string*<sp/>str){}<sp/>//La<sp/>funzione<sp/>restituisce<sp/>una<sp/>nuova<sp/>stringa<sp/>ottenuta<sp/>ponendo<sp/>in<sp/>minuscolo<sp/>ciascun<sp/>carattere<sp/>della<sp/>stringa<sp/>in<sp/>ingresso<sp/>che<sp/>non<sp/>è<sp/>alterata.<sp/>Per<sp/>esempio,<sp/>se<sp/>si<sp/>passa<sp/>come<sp/>parametro<sp/>in<sp/>ingresso<sp/>“Ciao”,<sp/>allora<sp/>la<sp/>funzione<sp/>restituirà<sp/>una<sp/>nuova<sp/>stringa<sp/>“ciao”<sp/>in<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//string*<sp/>sp_upper_case(const<sp/>string*<sp/>str){}<sp/>//La<sp/>funzione<sp/>restituisce<sp/>una<sp/>nuova<sp/>stringa<sp/>ottenuta<sp/>ponendo<sp/>in<sp/>maiuscolo<sp/>ciascun<sp/>carattere<sp/>della<sp/>stringa<sp/>in<sp/>ingresso<sp/>che<sp/>non<sp/>è<sp/>alterata.<sp/>Per<sp/>esempio,<sp/>se<sp/>si<sp/>passa<sp/>come<sp/>parametro<sp/>in<sp/>ingresso<sp/>“Ciao”,<sp/>allora<sp/>la<sp/>funzione<sp/>restituirà<sp/>una<sp/>nuova<sp/>stringa<sp/>“CIAO”<sp/>in<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//void<sp/>sp_initialize_stringpool(stringpool*<sp/>sp){}<sp/>//Inizializza<sp/>la<sp/>struttura<sp/>stringpool.<sp/>Pone<sp/>il<sp/>contatore<sp/>di<sp/>elementi<sp/>a<sp/>0<sp/>e<sp/>rende<sp/>tutti<sp/>gli<sp/>slot<sp/>disponibili.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//void<sp/>sp_free_stringpool(stringpool*<sp/>sp){}<sp/>//Libera<sp/>la<sp/>memoria<sp/>per<sp/>tutte<sp/>le<sp/>stringhe<sp/>salvate<sp/>in<sp/>strings<sp/>e<sp/>re-inizializza<sp/>la<sp/>struttura<sp/>stringpool<sp/>(positions<sp/>e<sp/>used_counter<sp/>azzerati).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//int<sp/>sp_sizeof(const<sp/>stringpool*<sp/>sp){}<sp/>//Restituisce<sp/>il<sp/>numero<sp/>di<sp/>stringhe<sp/>in<sp/>sp.<sp/>Restituisce<sp/>0<sp/>se<sp/>lo<sp/>stringpool<sp/>è<sp/>vuoto;<sp/>-1<sp/>se<sp/>sp<sp/>è<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//boolean<sp/>sp_isempty(const<sp/>stringpool*<sp/>sp){}<sp/>//Restituisce<sp/>un<sp/>valore<sp/>booleno<sp/>stante<sp/>a<sp/>indicare<sp/>se<sp/>lo<sp/>stringpool<sp/>è<sp/>vuoto<sp/>o<sp/>contiene<sp/>uno<sp/>o<sp/>più<sp/>elementi.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//boolean<sp/>sp_isfull(const<sp/>stringpool*<sp/>sp){}<sp/>//Restituisce<sp/>un<sp/>valore<sp/>booleno<sp/>stante<sp/>a<sp/>indicare<sp/>se<sp/>lo<sp/>stringpool<sp/>contiene<sp/>già<sp/>il<sp/>massimo<sp/>numero<sp/>di<sp/>elementi<sp/>consentiti<sp/>oppure<sp/>no.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//int<sp/>sp_find_string(const<sp/>stringpool*<sp/>sp,<sp/>const<sp/>string*<sp/>str){}<sp/>//Cerca<sp/>la<sp/>stringa<sp/>str<sp/>all’interno<sp/>dello<sp/>stringpool<sp/>e<sp/>ne<sp/>restituisce<sp/>la<sp/>posizione,<sp/>nel<sp/>caso<sp/>sia<sp/>presente.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//string*<sp/>sp_get_string(const<sp/>stringpool*<sp/>sp,<sp/>int<sp/>pos){}<sp/>//Restituisce<sp/>il<sp/>puntatore<sp/>alla<sp/>stringa<sp/>str<sp/>che<sp/>occupa<sp/>la<sp/>posizione<sp/>pos<sp/>all’interno<sp/>dello<sp/>stringpool.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//boolean<sp/>sp_add_string(stringpool*<sp/>sp,<sp/>string*<sp/>str){}<sp/>//Aggiunge<sp/>la<sp/>stringa<sp/>puntata<sp/>da<sp/>str<sp/>all’interno<sp/>dello<sp/>stringpool.<sp/>Nessuna<sp/>operazione<sp/>è<sp/>compiuta<sp/>se<sp/>str<sp/>e/o<sp/>sp<sp/>sono<sp/>nulli,<sp/>oppure<sp/>se<sp/>sp<sp/>è<sp/>pieno.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//boolean<sp/>sp_add_string_pos(stringpool*<sp/>sp,<sp/>string*<sp/>str,<sp/>int<sp/>pos){}<sp/>//Aggiunge<sp/>la<sp/>stringa<sp/>str<sp/>all’interno<sp/>dello<sp/>stringpool<sp/>in<sp/>posizione<sp/>pos.<sp/>Nessuna<sp/>operazione<sp/>è<sp/>compiuta<sp/>se<sp/>str<sp/>e/o<sp/>sp<sp/>sono<sp/>nulli,<sp/>se<sp/>pos<sp/>è<sp/>fuori<sp/>dall’intervallo<sp/>0&lt;=<sp/>pos<sp/>&lt;<sp/>MAX_DIM_STRING_POOL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//string*<sp/>sp_remove_string(stringpool*<sp/>sp,<sp/>int<sp/>pos){}<sp/>//Rimuove<sp/>e<sp/>restituisce<sp/>la<sp/>stringa<sp/>str<sp/>all’interno<sp/>dello<sp/>stringpool<sp/>in<sp/>posizione<sp/>pos.<sp/>Nessuna<sp/>operazione<sp/>è<sp/>compiuta<sp/>se<sp/>sp<sp/>è<sp/>nullo,<sp/>oppure<sp/>se<sp/>pos<sp/>è<sp/>fuori<sp/>dall’intervallo<sp/>pos,<sp/>MAX_DIM_STRING_POOL[</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//boolean<sp/>sp_replace_string(stringpool*<sp/>sp,<sp/>int<sp/>pos,<sp/>string*<sp/>newstr){}<sp/>//Sostituisce<sp/>la<sp/>stringa<sp/>all’interno<sp/>dello<sp/>stringpool<sp/>in<sp/>posizione<sp/>pos,<sp/>rimpiazzandola<sp/>con<sp/>str.<sp/>Nessuna<sp/>operazione<sp/>è<sp/>compiuta<sp/>se<sp/>str<sp/>e/o<sp/>sp<sp/>sono<sp/>nulli,<sp/>oppure<sp/>se<sp/>pos<sp/>è<sp/>fuori<sp/>dall’intervallo<sp/>[pos,<sp/>MAX_DIM_STRING_POOL[</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//int<sp/>sp_save_to_file(stringpool*<sp/>sp,<sp/>const<sp/>string<sp/>fname){}<sp/>//Salva<sp/>il<sp/>contenuto<sp/>dello<sp/>stringpool<sp/>in<sp/>un<sp/>file<sp/>di<sp/>testo,<sp/>con<sp/>il<sp/>nome<sp/>specificato<sp/>dal<sp/>secondo<sp/>paramentro<sp/>fname.<sp/>Ogni<sp/>elemento<sp/>sarà<sp/>salvato<sp/>su<sp/>una<sp/>riga<sp/>diversa.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//int<sp/>sp_load_from_file(stringpool*<sp/>sp,<sp/>const<sp/>string<sp/>fname){}<sp/>//Carica<sp/>il<sp/>contenuto<sp/>del<sp/>file<sp/>di<sp/>test<sp/>fname<sp/>nello<sp/>o<sp/>stringpool.<sp/>L’intera<sp/>stringa<sp/>letta<sp/>su<sp/>una<sp/>riga<sp/>sarà<sp/>un<sp/>elemento<sp/>dello<sp/>stringpool.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//void<sp/>bubble_sort(stringpool*<sp/>sp){}<sp/>//Ordina<sp/>alfabeticamente<sp/>gli<sp/>elementi<sp/>dello<sp/>stringpool,<sp/>applicando<sp/>l’algoritmo<sp/>di<sp/>bubble<sp/>sort.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//int<sp/>bin_search(const<sp/>stringpool*<sp/>sp,<sp/>const<sp/>string<sp/>str){}<sp/>//Cerca<sp/>la<sp/>stringa<sp/>str<sp/>all’interno<sp/>dello<sp/>stringpool<sp/>ordinato<sp/>attraverso<sp/>l’algoritmo<sp/>di<sp/>ricerca<sp/>binaria.<sp/>Ne<sp/>restituisce<sp/>la<sp/>posizione,<sp/>nel<sp/>caso<sp/>in<sp/>cui<sp/>str<sp/>sia<sp/>presente.</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/macbook/Documents/workspace-eclipse/stringpool/src/spstring.c"/>
  </compounddef>
</doxygen>
