<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="spstring_8c" kind="file">
    <compoundname>spstring.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">ctype.h</includes>
    <includes refid="bool_8h" local="yes">bool.h</includes>
    <includes refid="stringpool_8h" local="yes">stringpool.h</includes>
    <includes refid="spstring_8h" local="yes">spstring.h</includes>
    <incdepgraph>
      <node id="17">
        <label>stdlib.h</label>
      </node>
      <node id="19">
        <label>stddef.h</label>
      </node>
      <node id="21">
        <label>bool.h</label>
        <link refid="bool_8h"/>
      </node>
      <node id="18">
        <label>string.h</label>
      </node>
      <node id="15">
        <label>Library/spstring.c</label>
        <link refid="spstring.c"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>spstring.h</label>
        <link refid="spstring_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>stringpool.h</label>
        <link refid="stringpool_8h"/>
      </node>
      <node id="20">
        <label>ctype.h</label>
      </node>
      <node id="16">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="spstring_8c_1a43109a2f4b18023775b877451f725c13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>sp_initialize_stringpool</definition>
        <argsstring>(stringpool *sp)</argsstring>
        <name>sp_initialize_stringpool</name>
        <param>
          <type><ref refid="structstringpool" kindref="compound">stringpool</ref> *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Inizializza una struttura Stringpool. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a struttura stringpool </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Verifica se il puntatore sp non è NULL</para><para>Imposta il counter degli slot utilizzati al valore di EMPTY_STRING_POOL</para><para>Imposta le posizioni al valore di UNUSED_SLOT rendendole tutte libere </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="30" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="30" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1a60ed4be4036600f174388c36a0370818" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>sp_free</definition>
        <argsstring>(string *str)</argsstring>
        <name>sp_free</name>
        <param>
          <type><ref refid="structstring" kindref="compound">string</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Dealloca lo spazio di memoria a cui sta puntando str. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a struttura string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Verifica che il puntatore str non sia NULL</para><para>Verifica che sia stato allocato dello spazio in corrispondenza all&apos;area di memoria puntata da str-&gt;char_array</para><para>Libera lo spazio puntato da str-&gt;char_array</para><para>Libera lo spazio puntato da str</para><para>Forza str a valere NULL dopo la deallocazione </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="47" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="47" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1a99f5a66367fa19e42c24211e982c4b56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>sp_free_stringpool</definition>
        <argsstring>(stringpool *sp)</argsstring>
        <name>sp_free_stringpool</name>
        <param>
          <type><ref refid="structstringpool" kindref="compound">stringpool</ref> *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Libera la memoria e reinizializza la struct sringpool. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a stringpool </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>i - indice intero per ciclo for per la deallocazione delle stringe</para><para>Verifica che sp non sia NULL</para><para>Iterazione per liberare la memoria delle stringe salvate</para><para>Verifica che la posizione i-esima sia occupata da una stringa altrimenti evita istruzioni inutili</para><para>Rimuove la stringa decrementando used_counter e ponendo a 0 position[i] Per ogni iterazione la struttura stringpool è consistente e coerente con le string rimosse e da rimuovere</para><para>Libero la memoria occupata dalla stringa i-esima</para><para>Operazione non necessaria se <ref refid="spstring_8c_1a6fd0b8059482b70aa0bc8ee607e3fadb" kindref="member">sp_remove_string()</ref> e <ref refid="spstring_8c_1a60ed4be4036600f174388c36a0370818" kindref="member">sp_free()</ref> operano correttamente </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="72" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="72" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1aa9f031abbf235a5d16322d97f78c334d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstring" kindref="compound">string</ref> *</type>
        <definition>sp_new_empty_string</definition>
        <argsstring>(int len)</argsstring>
        <name>sp_new_empty_string</name>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Crea una string vuota di dimensione len. </para>        </briefdescription>
        <detaileddescription>
<para>Equivale alla stringa &quot;&quot; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>intero maggiore uguale a zero </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new_empty_string puntatore a struttura di tipo stringa </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Variabile di output, puntatre a string, inzializzata a NULL nel caso len non è &gt;= 0</para><para>Verifica che len sia maggiore uguale a zero</para><para>Alloca la memoria per il puntatore new_empty_string, di dimensione SIZE_STRING_STRUCT</para><para>Imposta la memoria allocata al valore di len</para><para>Alloca lo spazio di dimensione len caratteria al puntatore char_array</para><para>Inserisce il carattere di terminazione nello spazio allocato</para><para>Ritorna l&apos;indirizzo della struct string, è NULL solo se len &lt; 0 altrimenti punta ad una locazione di memoria valida</para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="107" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="107" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1ac14d3aa446e78a594b506cf2494b7273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstring" kindref="compound">string</ref> *</type>
        <definition>sp_new_string</definition>
        <argsstring>(const char *str)</argsstring>
        <name>sp_new_string</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Crea una string con contenuto pari a quello in ingresso. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore costante a caratteri </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new_string puntatore a string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Calcolo e salvo la lunghezza della stringa passata, essa non contiene conto del carattere di terminazione \0</para><para>Creo ed alloco una nuova stringa vuota di lunghezza (len_str+1)</para><para>Copio il contenuto di str in new_string-&gt;char_array</para><para>Ritorno il puntatore alla struct string </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="139" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="139" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1ab0823663ad7e935718ccfc2db8e316d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>sp_get_allocated_size</definition>
        <argsstring>(const string *str)</argsstring>
        <name>sp_get_allocated_size</name>
        <param>
          <type>const <ref refid="structstring" kindref="compound">string</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Restituisce la dimensione massima allocata per la stringa. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>allocated_size dimensione fisica allocata per str; se str è 0, restituisce NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Variabile allocated_size di output</para><para>Verifica che str e str-&gt;char_array non siano NULL</para><para>imposta allocated_size al valore di str-&gt;allocated_size</para><para>In caso allocated_size è 0 viene portato a NULL</para><para>Ritorna allocated_size che sarà &gt; 0 oppure NULL </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="159" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="159" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1ac994017d490a951c8f48c37bcbdf0c1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>sp_strlen</definition>
        <argsstring>(const string *str)</argsstring>
        <name>sp_strlen</name>
        <param>
          <type>const <ref refid="structstring" kindref="compound">string</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Calcola e restituisce la lunghezza logica di una string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>strlen_current_str Intero n rappresentante la lunghezza con n&gt;= 0; se str = NULL, allora n = 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Dichiaro ed inizializzo la variabile di output a 0</para><para>Verifico che str e str-&gt;char_array non siano NULL e che la dimensione allocata non sia 0</para><para>Calcolo la lunghezza della stringa contenuta in str-&gt;char_array</para><para>Ritorna la linghezza della stringa, sarà 0 str o str-&gt;char_arrat sono NULL </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="186" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="186" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1abb131e3e4d7f496a47d12c1692b75e15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7" kindref="member">boolean</ref></type>
        <definition>sp_strcmp</definition>
        <argsstring>(const string *str1, const char *str2)</argsstring>
        <name>sp_strcmp</name>
        <param>
          <type>const <ref refid="structstring" kindref="compound">string</ref> *</type>
          <declname>str1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str2</declname>
        </param>
        <briefdescription>
<para>Confronta due stringhe e restituisce il relativo valore di verità </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str1</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a string costante </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str2</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a carattere costante </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ifequal che sarà TRUE se str1 == str2; FALSE altrimenti </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Dichiaro ed inizializzo variabile di output Booleana a FALSE</para><para>Dichiaro le variabili per la lunghezza delle due stringhe</para><para>Controllo che str1 e str-&gt;char array non siano NULL, str2 sarà al massimo vuoto</para><para>inizializzo la lunghezza delle due stringhe</para><para>Verifico se hanno la stessa lunghezza, se sono lunghe uguali potrebbero anche essere identiche, altrimenti sono sicuramente diverse. Evito quindi di richiamere strcmp</para><para>Se sono lunghe uguali, verifico anche se sono identiche</para><para>Se sono anche identiche imposto ifequal a TRUE</para><para>Se non sono identiche imposto ifequal a FALSE</para><para>Se non sono lunghe uguali sono anche diverse, non faccio niente altro avendo ifequal inizializzato a FALSE</para><para>Ritorno il risultato che sarà TRUE solo nel caso siano identiche str1 e str2 altrimenti restuirà FALSE </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="208" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="208" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1afe063a22db56e1ed3b9de5a81820f002" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstring" kindref="compound">string</ref> *</type>
        <definition>sp_new_string_as_struct</definition>
        <argsstring>(const string *str)</argsstring>
        <name>sp_new_string_as_struct</name>
        <param>
          <type>const <ref refid="structstring" kindref="compound">string</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Crea una nuova string il cui contenuto è uguale a quella in ingresso. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>string_as_struct puntatore a string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>inizializzo la variabile di ritorno</para><para>associo alla variabile di ritorno il l&apos;indirizzo della nuova string creata con sp_new_string</para><para>Ritorno l&apos;indirizzo della nuova string </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="250" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="250" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1ad258858c5d6a2aa9b4b9ed5776155afc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstring" kindref="compound">string</ref> *</type>
        <definition>sp_strcpy</definition>
        <argsstring>(string *copy, const char *original, int offset)</argsstring>
        <name>sp_strcpy</name>
        <param>
          <type><ref refid="structstring" kindref="compound">string</ref> *</type>
          <declname>copy</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>original</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Copia il contenuto della string original in copy. </para>        </briefdescription>
        <detaileddescription>
<para>Copia la string partire dal carattere in posizione offset di copy. Se offset è 0, allora la copia avviene dall’inizio della stringa copy. La dimensione di copy deve essere pari o maggiore di quella di original. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>original</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>copy puntatore a string che punga ad una copia della string original, assumendo che N &gt;= M, a partire dalla posizione offset </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Dichiaro la variabile per la lunghezza della stringa original</para><para>Verifico che copy non sia NULL</para><para>controllo che offset sia minore della grandezza di copy e che original sia diverso da NULL</para><para>Ottengo la dimensione di original</para><para>Controllo che copy sia maggiore o uguale alla dimensione di original</para><para>Copio il contenuto di original in copy dalla posizione offset in poi</para><para>Ritorno l&apos;indirizzo di string copy </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="269" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="269" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1af0a1ed949316f182907ea08d4e8bd62b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstring" kindref="compound">string</ref> *</type>
        <definition>sp_strcat</definition>
        <argsstring>(const char *str1, const char *str2)</argsstring>
        <name>sp_strcat</name>
        <param>
          <type>const char *</type>
          <declname>str1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str2</declname>
        </param>
        <briefdescription>
<para>Crea una string ottenuta dalla concatenazione di due stringhe in ingresso. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str1</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a caratteri costante </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str2</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a caratteri costante </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>str_cat puntatore a string contenete una stringa equivalente a str1+str2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Dichiarro la variabile di ritorno</para><para>Dichiaro le variabili per le lunghezze rispettivamente di str2, str1 e string di output</para><para>Verifico che entrambe le stringhe non siano NULL</para><para>inizializzo le lunghezze di str1 e str2</para><para>Dichiaro la lunghezza complessiva della string concatenata sommando le lunghezze logiche di str1 e str2</para><para>Creo una nuova string vuota di lunghezza str_cat_len + 1 dato che sp_new_empty_string non tiene conto del carattere di terminazione</para><para>Copio in str_cat a partire dalla posizione 0 il contenuto di str1</para><para>Copio in str_cat a partire dalla posizione str_len_str1 la str2</para><para>Caso in cui almeno uno delle due string è NULL ma non entrambe NULL</para><para>Controllo quale delle due string è NULL</para><para>Nel caso fosse NULL la str1, creiamo una nuova string con il solo contenuto della str2</para><para>Nel caso fosse NULL la str2, creiamo una nuova string con il solo contenuto della str1</para><para>Ritorno il puntatore a string contenente le due stringhe concatenate </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="298" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="298" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1ad8c5bbe3b367845aaa230e19ac9e7919" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstring" kindref="compound">string</ref> *</type>
        <definition>sp_strcat_as_struct</definition>
        <argsstring>(const string *str1, const string *str2)</argsstring>
        <name>sp_strcat_as_struct</name>
        <param>
          <type>const <ref refid="structstring" kindref="compound">string</ref> *</type>
          <declname>str1</declname>
        </param>
        <param>
          <type>const <ref refid="structstring" kindref="compound">string</ref> *</type>
          <declname>str2</declname>
        </param>
        <briefdescription>
<para>Crea una string ottenuta dalla conctaenazione delle due string in ingresso. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str1</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a string costanti </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str2</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a string costanti </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>strcat_as_struct puntatore a string pari a str1+str2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Dichiaro la variabile di output</para><para>Verifico che entrmabe str1 e str2 non siano NULL</para><para>Controllo lo spazio allocato, se &gt; 0 vuol dire che non sono vuote</para><para>Concateno le due stringhe utilizzando <ref refid="spstring_8c_1af0a1ed949316f182907ea08d4e8bd62b" kindref="member">sp_strcat()</ref>{}</para><para>Caso in cui almeno una delle due ha dimensione 0 ma non entrambe di dimensione 0</para><para>Controllo quale delle due string è di dimensione 0</para><para>Nel caso str1 è di dimensione 0, creo una string con contenuto di str2</para><para>Nel caso str2 è di dimensione 0, creo una string con contenuto di str1</para><para>Caso in cui str1 o str2 è NULL ma non entrambe NULL</para><para>Verifico quale delle due è NULL</para><para>Nel caso fosse srt1 NULL e str2 sia di dimensione mazziore di 0, creo una stringa con il contenuto di str2</para><para>Nel caso fosse srt2 NULL e str1 sia di dimensione mazziore di 0, creo una stringa con il contenuto di str1</para><para>Ritorno il valore di ritorno </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="353" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="353" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1a8b5d366c459a30a563e83fc8804702e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstring" kindref="compound">string</ref> *</type>
        <definition>sp_lower_case</definition>
        <argsstring>(const string *str)</argsstring>
        <name>sp_lower_case</name>
        <param>
          <type>const <ref refid="structstring" kindref="compound">string</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Restituisce una nuova stringa ottenuta ponendo in minuscolo ciascun carattere della stringa in ingresso. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a string costante </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>lower_output Puntatore a string contenente caratteri in minuscolo </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Dichiaro variabile di output</para><para>Variabile per lunghezza stringa</para><para>Variabile temporanea per carattere da porre in minuscolo</para><para>Variabile indice per ciclo for, per porre iterativamente tutti i caratteri in minuscolo</para><para>Controllo che str sia diverso da NULL</para><para>Controllo che sia diverso da NULL anche char_array</para><para>Calcolo la lungehzza della stringa, che potrebbe essere diversa dalla dimensione allocata per la stringa</para><para>Creo una nuova stringa vuota di dimensione della stringa in ingresso</para><para>Ciclo su tutta la lunghezza della stringa</para><para>Passo alla funzione tolower il carattere iesimo copiandolo in tmp_lower</para><para>Copio quindi tmp_lower nella posizione i-esima della string di output, passaggio inutile ma migliora la leggibilità</para><para>Salvo il carattere di terminazine stringa in ultima+1 posizione</para><para>Ritorno la nuova stringa ottenuta ponendo in minuscolo ogni carattere </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="406" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="406" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1a70dbcd0b1199382b8a171ec68067370c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstring" kindref="compound">string</ref> *</type>
        <definition>sp_upper_case</definition>
        <argsstring>(const string *str)</argsstring>
        <name>sp_upper_case</name>
        <param>
          <type>const <ref refid="structstring" kindref="compound">string</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Restituisce una nuova stringa ottenuta ponendo in maiuscolo ciascun carattere della stringa in ingresso. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a string costante </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>upper_output Puntatore a string contenente caratteri in maiuscolo </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Dichiaro la variabile di output</para><para>Variabile per lunghezza string di output</para><para>Variabile temporanea per carattere da porre in maiuscolo</para><para>Variabile indice per ciclo for, per trasformare in maiuscolo tutti i caratteri</para><para>Controllo che str nons ia NULL</para><para>Controllo che char_array non sia NULL</para><para>Ottengo la lunghezza di str e creo una nuova stringa vuota di lungehzza uguale a str</para><para>Ciclo su tutta la lungehzza si str</para><para>Ottengo i-esimo carattere di str e lo trasformo in maiuscolo</para><para>Salvo l&apos;iesimo carattere maiuscolo nella string di output</para><para>Salvo il carattere di terminazine stringa in ultima+1 posizione</para><para>Ritorno la string di output con tutti i caratteri di str in maiuscolo </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="456" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="456" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1aff3ad92cec105f24f415f745ae476ba1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7" kindref="member">boolean</ref></type>
        <definition>sp_isempty</definition>
        <argsstring>(const stringpool *sp)</argsstring>
        <name>sp_isempty</name>
        <param>
          <type>const <ref refid="structstringpool" kindref="compound">stringpool</ref> *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Restituisce un valore booleno che indica se lo stringpool è vuoto. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a struttura stringpool costante </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>isempty è TRUE se sp è vuoto, FALSE altrimenti; se sp è NULL, restituisce FALSE </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Dichiaro la variabile di output e la inizializzo a FALSE</para><para>Verifico che sp non sia NUL</para><para>Controllo se il numero di slot usati è EMPTY_STRING_POOL</para><para>In caso affermativo, imposta isempty a TRUE, altrimenti rimane FALSE</para><para>Ritorno il valore di verità per sp VUOTO </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="505" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="505" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1a51a9f7cf9dc077b62d01ff8102301841" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7" kindref="member">boolean</ref></type>
        <definition>sp_isfull</definition>
        <argsstring>(const stringpool *sp)</argsstring>
        <name>sp_isfull</name>
        <param>
          <type>const <ref refid="structstringpool" kindref="compound">stringpool</ref> *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Restituisce un valore booleno che indica se stringpool contiene già il massimo numero di elementi consentiti. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a struttura stringpool costante </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>isfull è TRUE se il numero di elementi presenti è == MAX_DIM_STRING_POOL, FALSE altrimenti; se sp è NULL, restituisce TRUE </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Dichiaro la variabile di output</para><para>Controllo se sp è diverso da NULL</para><para>Controllo se il counter degli slot è impotato alla dimensione massima di stringpool</para><para>Tutti gli slot sono usati, imposto isfull a TRUE</para><para>Caso in cui sp == NULL</para><para>Imposto come da specifica isfull a TRUE</para><para>Ritorno il valore di verita per sp PIENO </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="528" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="528" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1ace396a34f5bb42619cb81756b2f5b375" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7" kindref="member">boolean</ref></type>
        <definition>sp_add_string_pos</definition>
        <argsstring>(stringpool *sp, string *str, int pos)</argsstring>
        <name>sp_add_string_pos</name>
        <param>
          <type><ref refid="structstringpool" kindref="compound">stringpool</ref> *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type><ref refid="structstring" kindref="compound">string</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Aggiunge una string all’interno dello stringpool in posizione pos. </para>        </briefdescription>
        <detaileddescription>
<para>Nessuna operazione è compiuta se str e/o sp sono nulli, se pos è fuori dall’intervallo 0&lt;= pos &lt; MAX_DIM_STRING_POOL <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a struttura stringpool </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a struttura string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>intero che indica la posizione in cui aggiungere la string</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>is_added vale TRUE se l’inserimento è andato a buon fine, FALSE altrimenti. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Dichiaro la variabile di output inizializzandola a FALSE</para><para>Controllo che sp e str non siano null e controllo che la posizione richiesta esista nello stringpool</para><para>Controllo che la posizione pos sia già occupata, in tal caso libero la memoria</para><para>Inesrisco in strings[pos] il puntatore a str passata</para><para>positions e used_counter sono aggiornati solo se è realmente presente in strings[pos] l&apos;indirizzo voluto, altrimenti non aggiorna le variabili</para><para>L&apos;assocciazione è andata a buon fine, posso aggiornare le variabili positions, used_counter e is_added per l&apos;output</para><para>Ritorno la variabile di output </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="562" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="562" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1ae86751935917ec79d819904cfb087817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7" kindref="member">boolean</ref></type>
        <definition>sp_add_string</definition>
        <argsstring>(stringpool *sp, string *str)</argsstring>
        <name>sp_add_string</name>
        <param>
          <type><ref refid="structstringpool" kindref="compound">stringpool</ref> *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type><ref refid="structstring" kindref="compound">string</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Aggiunge la stringa puntata da str all’interno dello stringpool. </para>        </briefdescription>
        <detaileddescription>
<para>Viene aggiunta nella prima posizione libera. Nessuna operazione è compiuta se str e/o sp sono nulli, oppure se sp è pieno.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a struttura stringpool </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a struttura string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>is_added TRUE se l’inserimento è andato a buon fine, FALSE altrimenti. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Dichiaro la variabile di outpu inizializzandola a FALSE</para><para>Dichiaro la varibile di verità per la posizione libera</para><para>Variabile indice per ciclo while per la ricerca della posizione libera</para><para>Variabile</para><para>Controllo che sp ed str non siano NULL</para><para>Controllo se lo string pool non è pieno</para><para>Ciclo per l&apos;intero stringpool alla ricerca della prima posizione libera</para><para>Il ciclo continua finchè check_free è diverso da 1 e non abbiamo controllato tutte le posizini</para><para>Per ogni ciclo controllo se l&apos;i-esima posizione è libera</para><para>In caso affermativo, imposto check_free a 1</para><para>Provo quindi ad aggiungere la string in ingresso nella posizione libera appena trovata</para><para>Memoriazando il risutlato di tale operazione</para><para>Controllo se l&apos;operazione di aggiunta della string in posizine iesima è andata a buon fine</para><para>In caso affermativo imposto la variabile di output a TRUE</para><para>In caso negativo, riporto check_free a 0 permettendo di continuare a cercare un&apos;altra posizione</para><para>Incremente il contatore iesimo</para><para>Ritorno il valore di verità per l&apos;operazione di aggiunta string </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="604" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="604" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1a96c3685a91d261df2cb06e9745bdca3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>sp_sizeof</definition>
        <argsstring>(const stringpool *sp)</argsstring>
        <name>sp_sizeof</name>
        <param>
          <type>const <ref refid="structstringpool" kindref="compound">stringpool</ref> *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Restituisce il numero di stringhe in sp. </para>        </briefdescription>
        <detaileddescription>
<para>Restituisce 0 se lo stringpool è vuoto; -1 se sp è NULL <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>\return</parametername>
</parameternamelist>
<parameterdescription>
<para>size_of_sp intero contenente il numero di elementi n&gt;=0 presenti nello stringpool </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
<para>Dichiaro la variabile di output</para><para>Controllo che sp sia diverso da NULL</para><para>In tal caso, associo alla variabile di output il numero di rigeh utilizzate che sarà sempre n&gt;=0 e 0 solo se sp è vuoto</para><para>Nel caso sp sia NULL, associo alla variabile di output il valore -1</para><para>Ritorno il valore di Output </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="664" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="664" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1a0b0458114373e76ff2c48696bcae2782" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstring" kindref="compound">string</ref> *</type>
        <definition>sp_get_string</definition>
        <argsstring>(const stringpool *sp, int pos)</argsstring>
        <name>sp_get_string</name>
        <param>
          <type>const <ref refid="structstringpool" kindref="compound">stringpool</ref> *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Restituisce il puntatore alla stringa str che occupa la posizione pos all’interno dello stringpool. </para>        </briefdescription>
        <detaileddescription>
<para>Se pos è fuori da questo intervallo o se sp è nullo, allora la funzione restituisce restituisce NULL.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore costante a struttura string pull </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>intero positivo che indica la posizione da controllare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>str_output puntatore a string in posizione pos, se 0&lt;= pos &lt; MAX_DIM_STRING_POOL; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Dichiaro la variabile di output e la inizializzo a NULL</para><para>Controllo come da specifica se sp è NULL, se la posizione è all&apos;interno degli indici di stringpool</para><para>Controllo se la posizione richiesta è utilizzata</para><para>In tal caso assozio l&apos;indirizzo a cui punta stirngs[pos] alla variabile di output</para><para>Ritorno la variabile di output </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="692" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="692" bodyend="709"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1a6fd0b8059482b70aa0bc8ee607e3fadb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstring" kindref="compound">string</ref> *</type>
        <definition>sp_remove_string</definition>
        <argsstring>(stringpool *sp, int pos)</argsstring>
        <name>sp_remove_string</name>
        <param>
          <type><ref refid="structstringpool" kindref="compound">stringpool</ref> *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Rimuove e restituisce la stringa str all’interno dello stringpool in posizione pos. </para>        </briefdescription>
        <detaileddescription>
<para>Nessuna operazione è compiuta se sp è nullo, oppure se pos è fuori dall’intervallo pos, MAX_DIM_STRING_POOL <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a struttura stringpool </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>intero che indica una posizione in stringpool </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>removed_str puntatore alla stringa rimossa dallo stringpool, oppure NULL se nessuna stringa è presente in posizione pos </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Dichiaro la variabile di output e la inzializzo a NULL</para><para>Controllo se sp è NULL o se pos sia all&apos;interno del range di inidici di stringpool</para><para>Controllo se la posizione cercata contiene una Stringa Se la condizione è soddisfatta salvo il suo indirizzo</para><para>Una volta salvato l&apos;indirizzo della string rimossa, imposto la posizione come DISPONIBILE</para><para>Importo il counter degli slot utilizzati ad un valore inferiore</para><para>Ritorno la variabile di ouput contenente l&apos;indirizzo della string rimossa </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="719" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="719" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1a465c42024674ec91ddb1158ee58c3466" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7" kindref="member">boolean</ref></type>
        <definition>sp_replace_string</definition>
        <argsstring>(stringpool *sp, int pos, string *newstr)</argsstring>
        <name>sp_replace_string</name>
        <param>
          <type><ref refid="structstringpool" kindref="compound">stringpool</ref> *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="structstring" kindref="compound">string</ref> *</type>
          <declname>newstr</declname>
        </param>
        <briefdescription>
<para>Sostituisce la stringa all’interno dello stringpool in posizione pos, rimpiazzandola con str. </para>        </briefdescription>
        <detaileddescription>
<para>Nessuna operazione è compiuta se str e/o sp sono nulli, oppure se pos è fuori dall’intervallo [pos, MAX_DIM_STRING_POOL[ <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a struttura stringpool </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newstr</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a struttura string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>is_relpaced TRUE se la sostituzione è andata a buon fine, FALSE altrimenti </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Dichiaro la variabile di output</para><para>Controllo se sp è NULL oppure se la posizione richiesta è all&apos;interno del range di indiici di stringpool</para><para>Controllo se la posizone richiesta è utilizzata e se la nuova string è diverso da NULL</para><para>Rimuvo la stringa richiesta in posizione POS, verranno decrementati il contatore ed impostato a libera la posizione pos</para><para>Aggiungo in posizionepos la nuova stringa, verrano reincrementati il contatore ed il valore di utilizzo dello slot</para><para>Salvo com&apos;è andata l&apos;operazione nel valore di ritorno</para><para>Ritorno la variabile di output che indica se l&apos;operazione è andata a buon fine </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="754" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="754" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1a971049db5eca3ef305591d1fcd195a0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>sp_save_to_file</definition>
        <argsstring>(stringpool *sp, const string fname)</argsstring>
        <name>sp_save_to_file</name>
        <param>
          <type><ref refid="structstringpool" kindref="compound">stringpool</ref> *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>const <ref refid="structstring" kindref="compound">string</ref></type>
          <declname>fname</declname>
        </param>
        <briefdescription>
<para>Salva il contenuto dello stringpool in un file di testo. </para>        </briefdescription>
        <detaileddescription>
<para>Specificando il nome nel secondo paramentro fname. Ogni elemento sarà salvato su una riga diversa.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a struttura stringpool </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a struttura string costante </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number_writed_line con il numero di elementi scritti nel file oppure -1 in caso di errore. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Dichiaro la variabile di output e la inizializzo a -1 in caso sia possibile effettuare alcuna operazione</para><para>Inizializzo la variabile indice per il ciclo di scruttura delle n linee</para><para>Inizializzo il puntatore al file per la lettura</para><para>Controllo che sp non sia null e che il nome del file su cui scrivere sia diverso da &quot;&quot; o &quot; &quot;</para><para>Credo il file richiesto e se l&apos;operazione è andata a buon fine continuo</para><para>Apro il file appena creato e se l&apos;operazione va a buon fine continuo</para><para>Imposto il numero di linee scritte a 0 dato che stiamo per scrivere un numero di righe &gt;= 0</para><para>Itero per l&apos;intero numero massimo di posizione dell&apos;array stringpool</para><para>controllo che lo slot i-esimo sia occupato da una string</para><para>In caso sia passata la condizione precedente, scrivo la riga i-esima basandomi sul pattern di scrittura e lettura PATTERN_READ_WRITE_LINE</para><para>Incremento il contatore del numero di righe scritte</para><para>In caso la riapertura del file non è andata a buon fine imposto la variabile di output a -1 come da specifica</para><para>Chiudo il file aperto</para><para>Ritorno il valore di output che sarà -1 se è stato incontrato qualche problema, altrimento sarò &gt;= 0 ovvero il numero di linee scritte pari a sp_sizeof(&lt;STRINPOOL&gt;) </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="786" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="786" bodyend="839"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1acc812ec5efe19197bad45658ffefb1fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>sp_load_from_file</definition>
        <argsstring>(stringpool *sp, const string fname)</argsstring>
        <name>sp_load_from_file</name>
        <param>
          <type><ref refid="structstringpool" kindref="compound">stringpool</ref> *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>const <ref refid="structstring" kindref="compound">string</ref></type>
          <declname>fname</declname>
        </param>
        <briefdescription>
<para>Carica il contenuto del file di test fname nello o stringpool. </para>        </briefdescription>
        <detaileddescription>
<para>L’intera stringa letta su una riga sarà un elemento dello stringpool. Inoltre conserva l&apos;ordinamento ed il posizionamento originale delle stringhe pizzandole esattamene nella posizione originale.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a struttura stringpool </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>struttura string contenente il nome del file da leggere </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number_loaded_line il numero di righe lette e caricate </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Dichiaro la variabile di output, la inizializzo a -1 in caso si incontrano problemi nel caricamento</para><para>Variabile di indice per ciclo for per caricamento righe</para><para>Dichiaro la variabile per la lettura &quot;massima&quot; di righe da file</para><para>Puntatore a file da leggere</para><para>Variabile per l&apos;i-esimo slot letto da file</para><para>Varibile della posizione dell&apos;i-esimo slot lett da file</para><para>array temporanei</para><para>tmp_slot_start_line per contenere l&apos;inizio della stringa</para><para>tmp_slot_end_line per contenere la fine della riga, ovvero uno spazio un punto e virgola ed il carattere di nuova linea</para><para>Controllo che sp non sia NULL, e che il nome del file richiesto non sia vuoto o pari al solo spazio</para><para>Controllo che il file richiesto esista</para><para>In caso esiste viene ri-aperto</para><para>Imposto il numero di righe caricate a 0</para><para>Leggo la prima informazione del file che contiene il numero di stringhe salvate Ed imposto tale valore a number_slot.</para><para>Effettuo una iterazione su number_slot in modo da leggere le righe e salvarle</para><para>Se il puntarore all&apos;i-esima itezione non è NULL continuo</para><para>Se il puntatore all&apos;i-esima iterazione non è parti a EOF continuo</para><para>Effettuo una prima lettura della righa con fscanf prelevando posizione dello slot letto e la sua dimesione</para><para>Effettuo una seconda lettura con fgets leggendo la parte restante del testo basandomi sulla dimensione appena letta</para><para>Effettuo una terza lettura utile solo a far avanzare il puntatore, leggendo i 3 caratteri finali della stinga sufficenti a far trovare il puntare ad inizio riga alla prosssima iterazione</para><para>Aggiungo in sp lo slot lett con tmp_slot_start_line in posizione pos</para><para>Incremento la varibile che indica il numero di righe caricate</para><para>Contollo di sicurezza in caso il valore letto da pos non sia compatibile con la dimensione massima e minima contenibile in uno stringpool</para><para>Chiudo il file aperto</para><para>Restituisco il valore di ritorno pari al numero di righe lette </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="850" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="850" bodyend="950"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1ae3399d635eb3cd9893e079f6eaef6e1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>bubble_sort</definition>
        <argsstring>(stringpool *sp)</argsstring>
        <name>bubble_sort</name>
        <param>
          <type><ref refid="structstringpool" kindref="compound">stringpool</ref> *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Ordina alfabeticamente gli elementi dello stringpool, applicando l’algoritmo di bubble sort. </para>        </briefdescription>
        <detaileddescription>
<para>Ordina effettuando un controllo su ogni coppia di elementi, partendo dal basso sceglie minore del confronto e lo porta verso l&apos;alto. Ho usato la versione &quot;corta&quot; dell&apos;algoritmo dover per ogni i-esimo ciclo assumiamo che l&apos;elemento appena spostato è già in posizione corretta. Ho dovuto applicare un piccolo hack per poter fare l&apos;ordinamento anche su array con elementi non contiugui e lasciare invariate le posizione vuote, in altri termini l&apos;algoritmo ordina gli elementi solo sulle posizione attualmente utilizzare senza alterare la posizione degli slot vuoti.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a struttura stringpool </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Dichiaro le variabili indici per i due cicli dell&apos;algoritmo Bubble sort</para><para>Dichiaro la variabile per identificare se nell&apos;i-esimo controllo è necessario uno Switch degli slot</para><para>Dichiaro la variabile per memorizzare temporaneamente la string da sostituire</para><para>Dichiaro la variabile per mappare le posizioni degli slot</para><para>Controllo prima se sp non sia NULL ed in seguito se sp non è VUOTO altrimenti non faccio null</para><para>Ottengo un array della mappa delle posizione dell&apos;array. Dove ogni i-esima posione contiene la posizione reale dello slot. Ad esempio se esistono 4 elementi, ma il sp-&gt;position[3] è vuoto mentre il sp-&gt;position[4] è pieno il risultato sarà un arrai del tipo [0-&gt;0,1-&gt;1,2-&gt;2,3-&gt;4]</para><para>Itero su due cicli for come da definizione dell&apos;algoritmo</para><para>Il primo ciclo itera da 0 alla dimensione di sp, incrementando il puntatore</para><para>Il secondo ciclo itera dalla dimensione di sp meno 1,fino ad i, decrementando l&apos;indice.</para><para>Ad ogni iterazione del primo ciclo for, il secndo ciclo for effettuera un passaggio in meno evitando di controllare elementi sicuramente già in posizione corretta</para><para>La j esima posione è quella corrente e dipende anche da i. Controlliamo le poszioni (j) e (j-1), identificando se sono o meno in ordine alfabetico utilizzando strcmp. Quindi ifswitch sarà -1 l&apos;elemento j deve essere spostato in posizione j-1 e viceversa</para><para>In questi cicli non mi devo preoccupare dei &quot;buchi&quot; nell&apos;array stringpool dato che le iterazioni sono fatte sulla mappa dele posizione che è un array continuo che ci permette di tradurre per ogni iterazione la reale posizione dello slot trattato</para><para>Controllo se bisogna scambiare gli elementi</para><para>Memorizzo temporanemente la stringa in posizione j</para><para>Rimpiazzo in posizione j la strin j-1</para><para>Rimpiazzo in posizione j-1 la stringa memorizzata precedentemente, ovvero quella in posizione j </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="962" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="962" bodyend="1025"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1a254f5e6ad18c821b31437d10a923cc83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>bin_search</definition>
        <argsstring>(const stringpool *sp, const string str)</argsstring>
        <name>bin_search</name>
        <param>
          <type>const <ref refid="structstringpool" kindref="compound">stringpool</ref> *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>const <ref refid="structstring" kindref="compound">string</ref></type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Cerca la stringa str all’interno dello stringpool ordinato attraverso l’algoritmo di ricerca binaria. </para>        </briefdescription>
        <detaileddescription>
<para>Ne restituisce la posizione, nel caso in cui str sia presente.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>\return</parametername>
</parameternamelist>
<parameterdescription>
<para>iffound pari alla posizione p della stringa, con 0&lt;= p &lt; MAX_DIM_STRING_POOL se str è presente in sp; p=-1, altrimenti. Se sp o str sono nulli, restituisce -1. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
<para>Dichiaro la variabile di output</para><para>Dichiaro la variabile indice per il ciclo while della ricerca binaria, rappresenta il numero di controll effettuati</para><para>Variabile di controllo per la ricerca della stringa cercata</para><para>Variabili per il calcolo dell&apos;i-esima posizione da controlla come da definizione del bin_search</para><para>Puntatore ad array di interi contenere la mappa delle posizioni degli slot in stringpool</para><para>Controllo che sp e str non siano NULL, altrimenti salta salta e restituisce valore di errore -1</para><para>Calcolo e salvo la dimensione di sp</para><para>Se ha dimensione diversa da 0 è possibile effettuare la ricerca</para><para>Ottengo la mappa delle posizione degli slot di sp</para><para>Imposto il parametro hight del binary serch alla dimensione di sp</para><para>Imposoto il parametro low del binary search a 1</para><para>Itero finchè str_cmp non è 0 ovvero è stata identificata esattamente la stringa ricercata oppure se abbiamo già controllato tutto gli slot</para><para>Calcolo mid su base della formula binary search</para><para>Controllo la strina in posizione mid, contrale rispetto [low, hight]</para><para>In base al risultato associo a low o hight un valore diverso ed incremento la variabile indice</para><para>Alla fine dll&apos;iterazione controllo controllo se sia stata identificata o meno la stringa righesta</para><para>In caso sia concluso il ciclo senza trovare la stringa o non sia neanche iniziato, imposto il risultato a -1</para><para>In caso invece sia stata identificata la stringa resituisco la sua posizione</para><para>Ritorno il valore di ritorno che può essere o la posizione p della strnga cercata o -1 in caso di errore </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="1035" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="1035" bodyend="1104"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1ac0204ece57f1cdce074fe7af7b7419f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>sp_find_string</definition>
        <argsstring>(const stringpool *sp, const string *str)</argsstring>
        <name>sp_find_string</name>
        <param>
          <type>const <ref refid="structstringpool" kindref="compound">stringpool</ref> *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>const <ref refid="structstring" kindref="compound">string</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Cerca la stringa str all’interno dello stringpool e ne restituisce la posizione, nel caso sia presente. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a struttura stringpool </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a struttura string costante </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>position_find Posizione p della stringa, con 0&lt;= p &lt; MAX_DIM_STRING_POOL se str è presente in sp; p=-1, altrimenti. Se sp e/o str sono NULL, restituisce -1. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Dichiaro la varibile di output e la inizializzo a -1 in caso di problemi durante la computazione</para><para>Dichiaro la variabile per l&apos;iterazione su tutto l&apos;array</para><para>Variabile di controllo per risultato comparazione</para><para>Controllo che sp ed str non siano NUL</para><para>Itero su tutta la dimensione possibile dell&apos;array</para><para>Controllo se la posizione i-esima è utilizzata</para><para>Comparo le stringhe e salvo il risultato</para><para>Controllo il risultato della comparazione</para><para>Se è stata identificata la stringa salvo la posizione i-esima corrente</para><para>Forzo l&apos;indice i a sforare sul valore di uscita dal ciclo for</para><para>Resituisco il valore di output, -1 se ci sono stati problemi e/o non è stata trovata o &gt;= pari alla posione della stringa cercata in sp </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="1112" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="1112" bodyend="1151"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1a126e34dae1b5bfb99d0bbb34b1526dc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7" kindref="member">boolean</ref></type>
        <definition>_sp_file_exist</definition>
        <argsstring>(const string *fname)</argsstring>
        <name>_sp_file_exist</name>
        <param>
          <type>const <ref refid="structstring" kindref="compound">string</ref> *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
<para>Controlla se il file richiesto esiste e ne restituisce il valore di verità </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a struttura string costante </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ifexist valore boolean FALSE se non esiste non è possibile aprirlo in modalità di lettura, TRUE se esiste ed è possibile aprirlo in modalità di lettura </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Dichiaro la variabile di output inizializzandola a FAlSE</para><para>Dichiaro il puntatore a file</para><para>Verifico che fname non sia nullo</para><para>Controllo se è possibile aprire il file richiesto in modalità di lettura</para><para>Se non è possibile aprirlo imposto la variabile di output a FALSE</para><para>Altrimenti se è possibile aprie il file imposto a TRUE la variabile di output</para><para>Chiudo il file</para><para>Ritorno la variabile di output </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="1158" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="1158" bodyend="1187"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1a790c017dd9dec0e2b95bf818d10ba005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7" kindref="member">boolean</ref></type>
        <definition>_sp_file_create</definition>
        <argsstring>(const string *fname)</argsstring>
        <name>_sp_file_create</name>
        <param>
          <type>const <ref refid="structstring" kindref="compound">string</ref> *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
<para>Controlla se esiste già il file e se non esiste lo crea. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore a struttura string costante </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ifcreated boolean valore di verità, TRUE se è esiste già o se non esiste ed è stato Creato, FALSE se non esiste non è stato possibile crearlo </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Dichiaro la variabile di output</para><para>Dichiaro il puntatore a file</para><para>Verifico che fname non sia nullo</para><para>Controllo se non esiste già il file</para><para>Se non esiste cerco di crearlo</para><para>Se non si riesce a a crearlo imposto la variabile di output a FALSE</para><para>Altrimenti se sono riuscito* a crerlo imposto la variabile di output a TRUE</para><para>Chiudo il file aperto</para><para>Se esiste già imposto la variabile outpt a TRUE</para><para>Ritorno il valore di output </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="1195" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="1195" bodyend="1231"/>
      </memberdef>
      <memberdef kind="function" id="spstring_8c_1a6143c920f51cf353336ee72034f68962" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int *</type>
        <definition>int* _sp_map_array_stringpool</definition>
        <argsstring>(const stringpool *sp)</argsstring>
        <name>_sp_map_array_stringpool</name>
        <param>
          <type>const <ref refid="structstringpool" kindref="compound">stringpool</ref> *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Dichiaro l&apos;array di output</para><para>Dichiaro la variabile indice per il ciclo for e la variabile di posizione</para><para>Controllo che sp non sia NULL</para><para>Inizializzo lo spazio di memoria per l&apos;array di outpu calcolato sulla dimensione di sp</para><para>Itero su tutte le possibili posizioni potenzialmente occupate in sp</para><para>Controllo se la i-esima posizione è occupata</para><para>In caso sia occupata salvo in posizioni consecutive la posizione i-esima</para><para>Incremento la posizione del vettore di output solo se è stato inserito qualcosa</para><para>Ritorno la varibile di ouput </para>        </inbodydescription>
        <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" line="1244" bodyfile="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c" bodystart="1244" bodyend="1274"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implementazione funzioni stringpool. </para>    </briefdescription>
    <detaileddescription>
<para>La libreria stringpool consente la gestione di un&apos;insieme di dati di tipo string. Due sono i tipi di dato gestiti: string, stringpool.</para><para><simplesect kind="author"><para>Domenico Monaco, <ulink url="mailto:domenico.monaco@kiuz.it">domenico.monaco@kiuz.it</ulink> </para></simplesect>
<simplesect kind="date"><para>2011 </para></simplesect>
</para><sect1 id="stringpool_8h_1license">
<title>Licenza</title>
<para>GPLv2 <ulink url="http://www.softwarelibero.it/gnudoc/gpl.it.txt">http://www.softwarelibero.it/gnudoc/gpl.it.txt</ulink> Per maggiori informazioni visitare il link o visualizzare il file LICENSE </para></sect1>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="15"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bool_8h" kindref="compound" tooltip="Header per valori Booleani.">bool.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stringpool_8h" kindref="compound" tooltip="Header per tipi di dati stringpool.">stringpool.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="spstring_8h" kindref="compound" tooltip="Header per funzioni stringpool.">spstring.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="spstring_8c_1a43109a2f4b18023775b877451f725c13" kindref="member" tooltip="Inizializza una struttura Stringpool.">sp_initialize_stringpool</ref>(<ref refid="structstringpool" kindref="compound">stringpool</ref>*<sp/><ref refid="cunit__stringpool__lib_8c_1a421ecbacf6dacc6f5e391d074522db9e" kindref="member">sp</ref>)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>sp-&gt;<ref refid="structstringpool_1ae8c4c199ad0a8d10621110791d6d653e" kindref="member">used_counter</ref><sp/>=<sp/><ref refid="stringpool_8h_1aae221160aeb62c7ea119f68a5a79062e" kindref="member">EMPTY_STRING_POOL</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">memset(sp-&gt;<ref refid="structstringpool_1ab0cc50c97d44081fab72467d607a9325" kindref="member">positions</ref>,<sp/><ref refid="stringpool_8h_1a20af6dd1f5a589e2a11eb37c1ea3ee96" kindref="member">UNUSED_SLOT</ref>,<sp/><ref refid="stringpool_8h_1af4c76709286f016c09a7f99a070e6a5e" kindref="member">MAX_DIM_STRING_POOL</ref>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="spstring_8c_1a60ed4be4036600f174388c36a0370818" kindref="member" tooltip="Dealloca lo spazio di memoria a cui sta puntando str.">sp_free</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>!=<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/>free(str-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>free(str);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>str<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="spstring_8c_1a99f5a66367fa19e42c24211e982c4b56" kindref="member" tooltip="Libera la memoria e reinizializza la struct sringpool.">sp_free_stringpool</ref>(<ref refid="structstringpool" kindref="compound">stringpool</ref>*<sp/>sp)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>!=<sp/>sp)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="stringpool_8h_1af4c76709286f016c09a7f99a070e6a5e" kindref="member">MAX_DIM_STRING_POOL</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp-&gt;<ref refid="structstringpool_1ab0cc50c97d44081fab72467d607a9325" kindref="member">positions</ref>[i]<sp/>==<sp/><ref refid="stringpool_8h_1a80b8e6b0b534147058fcfc1187079064" kindref="member">USED_SLOT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spstring_8c_1a6fd0b8059482b70aa0bc8ee607e3fadb" kindref="member" tooltip="Rimuove e restituisce la stringa str all’interno dello stringpool in posizione pos.">sp_remove_string</ref>(sp,<sp/>i);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spstring_8c_1a60ed4be4036600f174388c36a0370818" kindref="member" tooltip="Dealloca lo spazio di memoria a cui sta puntando str.">sp_free</ref>(sp-&gt;<ref refid="structstringpool_1af28549aacb7ae1827e1000400381bdbb" kindref="member">strings</ref>[i]);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><ref refid="spstring_8c_1a43109a2f4b18023775b877451f725c13" kindref="member" tooltip="Inizializza una struttura Stringpool.">sp_initialize_stringpool</ref>(sp);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/><ref refid="spstring_8c_1aa9f031abbf235a5d16322d97f78c334d" kindref="member" tooltip="Crea una string vuota di dimensione len.">sp_new_empty_string</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>new_empty_string<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>new_empty_string<sp/>=<sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*)<sp/>calloc(<ref refid="stringpool_8h_1a402d2a2201ce976dc56cc87fe4e657da" kindref="member">SIZE_STRING_STRUCT</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>new_empty_string-&gt;<ref refid="structstring_1ac06bb82958ec7c45e2838ae575b124ec" kindref="member">allocated_size</ref><sp/>=<sp/>(len);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>new_empty_string-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>calloc((len),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(char));</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>new_empty_string-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref><sp/>=<sp/>strcpy(new_empty_string-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref>,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_empty_string;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/><ref refid="spstring_8c_1ac14d3aa446e78a594b506cf2494b7273" kindref="member" tooltip="Crea una string con contenuto pari a quello in ingresso.">sp_new_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len_str<sp/>=<sp/>strlen(str);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>new_string<sp/>=<sp/><ref refid="spstring_8c_1aa9f031abbf235a5d16322d97f78c334d" kindref="member" tooltip="Crea una string vuota di dimensione len.">sp_new_empty_string</ref>(len_str<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/>new_string<sp/>=<sp/><ref refid="spstring_8c_1ad258858c5d6a2aa9b4b9ed5776155afc" kindref="member" tooltip="Copia il contenuto della string original in copy.">sp_strcpy</ref>(new_string,<sp/>str,<sp/>0);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_string;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="spstring_8c_1ab0823663ad7e935718ccfc2db8e316d3" kindref="member" tooltip="Restituisce la dimensione massima allocata per la stringa.">sp_get_allocated_size</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>allocated_size;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>!=<sp/>str<sp/>||<sp/>str-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>allocated_size<sp/>=<sp/>str-&gt;<ref refid="structstring_1ac06bb82958ec7c45e2838ae575b124ec" kindref="member">allocated_size</ref>;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allocated_size<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/>allocated_size<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>allocated_size;</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="spstring_8c_1ac994017d490a951c8f48c37bcbdf0c1b" kindref="member" tooltip="Calcola e restituisce la lunghezza logica di una string.">sp_strlen</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>strlen_current_str<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>!=<sp/>str<sp/>&amp;&amp;<sp/>str-&gt;<ref refid="structstring_1ac06bb82958ec7c45e2838ae575b124ec" kindref="member">allocated_size</ref><sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>str-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>strlen_current_str<sp/>=<sp/>strlen(str-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strlen_current_str;</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/><ref refid="spstring_8c_1abb131e3e4d7f496a47d12c1692b75e15" kindref="member" tooltip="Confronta due stringhe e restituisce il relativo valore di verità">sp_strcmp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>str1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str2)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>ifequal<sp/>=<sp/><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7aa1e095cc966dbecf6a0d8aad75348d1a" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>strlen_1,<sp/>strlen_2;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str1-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref><sp/>!=<sp/>NULL<sp/>||<sp/>str1<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>strlen_1<sp/>=<sp/>strlen(str1-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref>);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>strlen_2<sp/>=<sp/>strlen(str2);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strlen_1<sp/>==<sp/>strlen_2)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(str1-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref>,<sp/>str2)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>ifequal<sp/>=<sp/><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7aa82764c3079aea4e60c80e45befbb839" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>ifequal<sp/>=<sp/><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7aa1e095cc966dbecf6a0d8aad75348d1a" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ifequal;</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/><ref refid="spstring_8c_1afe063a22db56e1ed3b9de5a81820f002" kindref="member" tooltip="Crea una nuova string il cui contenuto è uguale a quella in ingresso.">sp_new_string_as_struct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>string_as_struct<sp/>=<sp/><ref refid="spstring_8c_1ac14d3aa446e78a594b506cf2494b7273" kindref="member" tooltip="Crea una string con contenuto pari a quello in ingresso.">sp_new_string</ref>(str-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref>);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string_as_struct;</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/><ref refid="spstring_8c_1ad258858c5d6a2aa9b4b9ed5776155afc" kindref="member" tooltip="Copia il contenuto della string original in copy.">sp_strcpy</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>copy,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>original,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>original_len;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(copy<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(copy-&gt;<ref refid="structstring_1ac06bb82958ec7c45e2838ae575b124ec" kindref="member">allocated_size</ref><sp/>&gt;=<sp/>offset<sp/>&amp;&amp;<sp/>(original<sp/>!=<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/>original_len<sp/>=<sp/>strlen(original);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((copy-&gt;<ref refid="structstring_1ac06bb82958ec7c45e2838ae575b124ec" kindref="member">allocated_size</ref><sp/>&gt;=<sp/>original_len))<sp/>{strcpy((copy-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref>+offset),<sp/>original);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copy;</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/><ref refid="spstring_8c_1af0a1ed949316f182907ea08d4e8bd62b" kindref="member" tooltip="Crea una string ottenuta dalla concatenazione di due stringhe in ingresso.">sp_strcat</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str2)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>str_cat;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>str_len_str2,<sp/>str_len_str1,<sp/>str_cat_len;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str1<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>str2<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>str_len_str1<sp/>=<sp/>strlen(str1);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>str_len_str2<sp/>=<sp/>strlen(str2);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>str_cat_len<sp/>=<sp/>str_len_str1<sp/>+<sp/>str_len_str2;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>str_cat<sp/>=<sp/><ref refid="spstring_8c_1aa9f031abbf235a5d16322d97f78c334d" kindref="member" tooltip="Crea una string vuota di dimensione len.">sp_new_empty_string</ref>(str_cat_len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><ref refid="spstring_8c_1ad258858c5d6a2aa9b4b9ed5776155afc" kindref="member" tooltip="Copia il contenuto della string original in copy.">sp_strcpy</ref>(str_cat,<sp/>str1,<sp/>0);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><ref refid="spstring_8c_1ad258858c5d6a2aa9b4b9ed5776155afc" kindref="member" tooltip="Copia il contenuto della string original in copy.">sp_strcpy</ref>(str_cat,<sp/>str2,<sp/>str_len_str1);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((str1<sp/>==<sp/>NULL<sp/>||<sp/>str2<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/>&amp;&amp;<sp/>!(str1<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>str2<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str1<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/>str_len_str2<sp/>=<sp/>strlen(str2);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/>str_cat<sp/>=<sp/><ref refid="spstring_8c_1aa9f031abbf235a5d16322d97f78c334d" kindref="member" tooltip="Crea una string vuota di dimensione len.">sp_new_empty_string</ref>(str_len_str2<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><ref refid="spstring_8c_1ad258858c5d6a2aa9b4b9ed5776155afc" kindref="member" tooltip="Copia il contenuto della string original in copy.">sp_strcpy</ref>(str_cat,<sp/>str2,<sp/>0);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str2<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/>str_len_str1<sp/>=<sp/>strlen(str1);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/>str_cat<sp/>=<sp/><ref refid="spstring_8c_1aa9f031abbf235a5d16322d97f78c334d" kindref="member" tooltip="Crea una string vuota di dimensione len.">sp_new_empty_string</ref>(str_len_str1<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><ref refid="spstring_8c_1ad258858c5d6a2aa9b4b9ed5776155afc" kindref="member" tooltip="Copia il contenuto della string original in copy.">sp_strcpy</ref>(str_cat,<sp/>str1,<sp/>0);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str_cat;</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/><ref refid="spstring_8c_1ad8c5bbe3b367845aaa230e19ac9e7919" kindref="member" tooltip="Crea una string ottenuta dalla conctaenazione delle due string in ingresso.">sp_strcat_as_struct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>str1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>str2)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>strcat_as_struct;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str1<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>str2<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str1-&gt;<ref refid="structstring_1ac06bb82958ec7c45e2838ae575b124ec" kindref="member">allocated_size</ref><sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>str2-&gt;<ref refid="structstring_1ac06bb82958ec7c45e2838ae575b124ec" kindref="member">allocated_size</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/>strcat_as_struct<sp/>=<sp/><ref refid="spstring_8c_1af0a1ed949316f182907ea08d4e8bd62b" kindref="member" tooltip="Crea una string ottenuta dalla concatenazione di due stringhe in ingresso.">sp_strcat</ref>(str1-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref>,<sp/>str2-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref>);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((str1-&gt;<ref refid="structstring_1ac06bb82958ec7c45e2838ae575b124ec" kindref="member">allocated_size</ref><sp/>==<sp/>0<sp/>||<sp/>str2-&gt;<ref refid="structstring_1ac06bb82958ec7c45e2838ae575b124ec" kindref="member">allocated_size</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!((str1-&gt;<ref refid="structstring_1ac06bb82958ec7c45e2838ae575b124ec" kindref="member">allocated_size</ref><sp/>==<sp/>0<sp/>&amp;&amp;<sp/>str2-&gt;<ref refid="structstring_1ac06bb82958ec7c45e2838ae575b124ec" kindref="member">allocated_size</ref><sp/>==<sp/>0)))<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str1-&gt;<ref refid="structstring_1ac06bb82958ec7c45e2838ae575b124ec" kindref="member">allocated_size</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>strcat_as_struct<sp/>=<sp/><ref refid="spstring_8c_1afe063a22db56e1ed3b9de5a81820f002" kindref="member" tooltip="Crea una nuova string il cui contenuto è uguale a quella in ingresso.">sp_new_string_as_struct</ref>(str2);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str2-&gt;<ref refid="structstring_1ac06bb82958ec7c45e2838ae575b124ec" kindref="member">allocated_size</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>strcat_as_struct<sp/>=<sp/><ref refid="spstring_8c_1afe063a22db56e1ed3b9de5a81820f002" kindref="member" tooltip="Crea una nuova string il cui contenuto è uguale a quella in ingresso.">sp_new_string_as_struct</ref>(str1);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((str1<sp/>==<sp/>NULL<sp/>||<sp/>str2<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/>&amp;&amp;<sp/>!(str1<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>str2<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str1<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str2-&gt;<ref refid="structstring_1ac06bb82958ec7c45e2838ae575b124ec" kindref="member">allocated_size</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>strcat_as_struct<sp/>=<sp/><ref refid="spstring_8c_1afe063a22db56e1ed3b9de5a81820f002" kindref="member" tooltip="Crea una nuova string il cui contenuto è uguale a quella in ingresso.">sp_new_string_as_struct</ref>(str2);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str2<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str1-&gt;<ref refid="structstring_1ac06bb82958ec7c45e2838ae575b124ec" kindref="member">allocated_size</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>strcat_as_struct<sp/>=<sp/><ref refid="spstring_8c_1afe063a22db56e1ed3b9de5a81820f002" kindref="member" tooltip="Crea una nuova string il cui contenuto è uguale a quella in ingresso.">sp_new_string_as_struct</ref>(str1);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strcat_as_struct;</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/><ref refid="spstring_8c_1a8b5d366c459a30a563e83fc8804702e2" kindref="member" tooltip="Restituisce una nuova stringa ottenuta ponendo in minuscolo ciascun carattere della stringa in ingres...">sp_lower_case</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>lower_output<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>str_len;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>tmp_lower;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/>str_len<sp/>=<sp/><ref refid="spstring_8c_1ac994017d490a951c8f48c37bcbdf0c1b" kindref="member" tooltip="Calcola e restituisce la lunghezza logica di una string.">sp_strlen</ref>(str);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/>lower_output<sp/>=<sp/><ref refid="spstring_8c_1aa9f031abbf235a5d16322d97f78c334d" kindref="member" tooltip="Crea una string vuota di dimensione len.">sp_new_empty_string</ref>(str_len);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>str_len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_lower<sp/>=<sp/>tolower((str-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref>[i]));</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>lower_output-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref>[i]<sp/>=<sp/>tmp_lower;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/>lower_output-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref>[str_len]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lower_output;</highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/><ref refid="spstring_8c_1a70dbcd0b1199382b8a171ec68067370c" kindref="member" tooltip="Restituisce una nuova stringa ottenuta ponendo in maiuscolo ciascun carattere della stringa in ingres...">sp_upper_case</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>upper_output<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>str_len;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>tmp_upper;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/>str_len<sp/>=<sp/><ref refid="spstring_8c_1ac994017d490a951c8f48c37bcbdf0c1b" kindref="member" tooltip="Calcola e restituisce la lunghezza logica di una string.">sp_strlen</ref>(str);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/>upper_output<sp/>=<sp/><ref refid="spstring_8c_1aa9f031abbf235a5d16322d97f78c334d" kindref="member" tooltip="Crea una string vuota di dimensione len.">sp_new_empty_string</ref>(str_len);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>str_len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_upper<sp/>=<sp/>toupper((str-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref>[i]));</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>upper_output-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref>[i]<sp/>=<sp/>tmp_upper;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/>upper_output-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref>[str_len]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>upper_output;</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/><ref refid="spstring_8c_1aff3ad92cec105f24f415f745ae476ba1" kindref="member" tooltip="Restituisce un valore booleno che indica se lo stringpool è vuoto.">sp_isempty</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structstringpool" kindref="compound">stringpool</ref>*<sp/>sp)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>isempty<sp/>=<sp/><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7aa1e095cc966dbecf6a0d8aad75348d1a" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp-&gt;<ref refid="structstringpool_1ae8c4c199ad0a8d10621110791d6d653e" kindref="member">used_counter</ref><sp/>==<sp/><ref refid="stringpool_8h_1aae221160aeb62c7ea119f68a5a79062e" kindref="member">EMPTY_STRING_POOL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/>isempty<sp/>=<sp/><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7aa82764c3079aea4e60c80e45befbb839" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isempty;</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/><ref refid="spstring_8c_1a51a9f7cf9dc077b62d01ff8102301841" kindref="member" tooltip="Restituisce un valore booleno che indica se stringpool contiene già il massimo numero di elementi cons...">sp_isfull</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structstringpool" kindref="compound">stringpool</ref>*<sp/>sp)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>isfull<sp/>=<sp/><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7aa1e095cc966dbecf6a0d8aad75348d1a" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp-&gt;<ref refid="structstringpool_1ae8c4c199ad0a8d10621110791d6d653e" kindref="member">used_counter</ref><sp/>==<sp/><ref refid="stringpool_8h_1af4c76709286f016c09a7f99a070e6a5e" kindref="member">MAX_DIM_STRING_POOL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/>isfull<sp/>=<sp/><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7aa82764c3079aea4e60c80e45befbb839" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>isfull<sp/>=<sp/><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7aa82764c3079aea4e60c80e45befbb839" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isfull;</highlight></codeline>
<codeline lineno="550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/><ref refid="spstring_8c_1ace396a34f5bb42619cb81756b2f5b375" kindref="member" tooltip="Aggiunge una string all’interno dello stringpool in posizione pos.">sp_add_string_pos</ref>(<ref refid="structstringpool" kindref="compound">stringpool</ref>*<sp/>sp,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>is_added<sp/>=<sp/><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7aa1e095cc966dbecf6a0d8aad75348d1a" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>str<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>pos<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>pos<sp/>&lt;<sp/>(<ref refid="stringpool_8h_1af4c76709286f016c09a7f99a070e6a5e" kindref="member">MAX_DIM_STRING_POOL</ref>))<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp-&gt;<ref refid="structstringpool_1ab0cc50c97d44081fab72467d607a9325" kindref="member">positions</ref>[pos]<sp/>==<sp/><ref refid="stringpool_8h_1a80b8e6b0b534147058fcfc1187079064" kindref="member">USED_SLOT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><ref refid="spstring_8c_1a60ed4be4036600f174388c36a0370818" kindref="member" tooltip="Dealloca lo spazio di memoria a cui sta puntando str.">sp_free</ref>(<ref refid="spstring_8c_1a6fd0b8059482b70aa0bc8ee607e3fadb" kindref="member" tooltip="Rimuove e restituisce la stringa str all’interno dello stringpool in posizione pos.">sp_remove_string</ref>(sp,<sp/>pos));</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>sp-&gt;<ref refid="structstringpool_1af28549aacb7ae1827e1000400381bdbb" kindref="member">strings</ref>[pos]<sp/>=<sp/>str;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp-&gt;<ref refid="structstringpool_1af28549aacb7ae1827e1000400381bdbb" kindref="member">strings</ref>[pos]<sp/>==<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/>is_added<sp/>=<sp/><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7aa82764c3079aea4e60c80e45befbb839" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/>sp-&gt;<ref refid="structstringpool_1ab0cc50c97d44081fab72467d607a9325" kindref="member">positions</ref>[pos]<sp/>=<sp/><ref refid="stringpool_8h_1a80b8e6b0b534147058fcfc1187079064" kindref="member">USED_SLOT</ref>;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/>sp-&gt;<ref refid="structstringpool_1ae8c4c199ad0a8d10621110791d6d653e" kindref="member">used_counter</ref><sp/>=<sp/>sp-&gt;<ref refid="structstringpool_1ae8c4c199ad0a8d10621110791d6d653e" kindref="member">used_counter</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_added;</highlight></codeline>
<codeline lineno="593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/><ref refid="spstring_8c_1ae86751935917ec79d819904cfb087817" kindref="member" tooltip="Aggiunge la stringa puntata da str all’interno dello stringpool.">sp_add_string</ref>(<ref refid="structstringpool" kindref="compound">stringpool</ref>*<sp/>sp,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>is_added<sp/>=<sp/><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7aa1e095cc966dbecf6a0d8aad75348d1a" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>check_free<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result_adding_pos;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>str<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(<ref refid="spstring_8c_1a51a9f7cf9dc077b62d01ff8102301841" kindref="member" tooltip="Restituisce un valore booleno che indica se stringpool contiene già il massimo numero di elementi cons...">sp_isfull</ref>(sp)))<sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(check_free<sp/>!=<sp/>1<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/><ref refid="stringpool_8h_1af4c76709286f016c09a7f99a070e6a5e" kindref="member">MAX_DIM_STRING_POOL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp-&gt;<ref refid="structstringpool_1ab0cc50c97d44081fab72467d607a9325" kindref="member">positions</ref>[i]<sp/>==<sp/><ref refid="stringpool_8h_1a20af6dd1f5a589e2a11eb37c1ea3ee96" kindref="member">UNUSED_SLOT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>check_free<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>result_adding_pos<sp/>=<sp/><ref refid="spstring_8c_1ace396a34f5bb42619cb81756b2f5b375" kindref="member" tooltip="Aggiunge una string all’interno dello stringpool in posizione pos.">sp_add_string_pos</ref>(sp,<sp/>str,<sp/>i);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result_adding_pos<sp/>==<sp/><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7aa82764c3079aea4e60c80e45befbb839" kindref="member">TRUE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>is_added<sp/>=<sp/><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7aa82764c3079aea4e60c80e45befbb839" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_free<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_added;</highlight></codeline>
<codeline lineno="655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="spstring_8c_1a96c3685a91d261df2cb06e9745bdca3f" kindref="member" tooltip="Restituisce il numero di stringhe in sp.">sp_sizeof</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structstringpool" kindref="compound">stringpool</ref>*<sp/>sp)<sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size_of_sp;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>size_of_sp<sp/>=<sp/>sp-&gt;<ref refid="structstringpool_1ae8c4c199ad0a8d10621110791d6d653e" kindref="member">used_counter</ref>;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>size_of_sp<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_of_sp;</highlight></codeline>
<codeline lineno="681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/><ref refid="spstring_8c_1a0b0458114373e76ff2c48696bcae2782" kindref="member" tooltip="Restituisce il puntatore alla stringa str che occupa la posizione pos all’interno dello stringpool...">sp_get_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structstringpool" kindref="compound">stringpool</ref>*<sp/>sp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)<sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>str_output<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>pos<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>pos<sp/>&lt;<sp/>(<ref refid="stringpool_8h_1af4c76709286f016c09a7f99a070e6a5e" kindref="member">MAX_DIM_STRING_POOL</ref>))<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp-&gt;<ref refid="structstringpool_1ab0cc50c97d44081fab72467d607a9325" kindref="member">positions</ref>[pos]<sp/>==<sp/><ref refid="stringpool_8h_1a80b8e6b0b534147058fcfc1187079064" kindref="member">USED_SLOT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/>str_output<sp/>=<sp/>sp-&gt;<ref refid="structstringpool_1af28549aacb7ae1827e1000400381bdbb" kindref="member">strings</ref>[pos];</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str_output;</highlight></codeline>
<codeline lineno="709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/><ref refid="spstring_8c_1a6fd0b8059482b70aa0bc8ee607e3fadb" kindref="member" tooltip="Rimuove e restituisce la stringa str all’interno dello stringpool in posizione pos.">sp_remove_string</ref>(<ref refid="structstringpool" kindref="compound">stringpool</ref>*<sp/>sp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>removed_str<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>pos<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>pos<sp/>&lt;<sp/><ref refid="stringpool_8h_1af4c76709286f016c09a7f99a070e6a5e" kindref="member">MAX_DIM_STRING_POOL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp-&gt;<ref refid="structstringpool_1ab0cc50c97d44081fab72467d607a9325" kindref="member">positions</ref>[pos]<sp/>==<sp/><ref refid="stringpool_8h_1a80b8e6b0b534147058fcfc1187079064" kindref="member">USED_SLOT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/>removed_str<sp/>=<sp/>sp-&gt;<ref refid="structstringpool_1af28549aacb7ae1827e1000400381bdbb" kindref="member">strings</ref>[pos];</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/>sp-&gt;<ref refid="structstringpool_1ab0cc50c97d44081fab72467d607a9325" kindref="member">positions</ref>[pos]<sp/>=<sp/><ref refid="stringpool_8h_1a20af6dd1f5a589e2a11eb37c1ea3ee96" kindref="member">UNUSED_SLOT</ref>;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/>sp-&gt;<ref refid="structstringpool_1ae8c4c199ad0a8d10621110791d6d653e" kindref="member">used_counter</ref><sp/>=<sp/>sp-&gt;<ref refid="structstringpool_1ae8c4c199ad0a8d10621110791d6d653e" kindref="member">used_counter</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>removed_str;</highlight></codeline>
<codeline lineno="744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/><ref refid="spstring_8c_1a465c42024674ec91ddb1158ee58c3466" kindref="member" tooltip="Sostituisce la stringa all’interno dello stringpool in posizione pos, rimpiazzandola con str...">sp_replace_string</ref>(<ref refid="structstringpool" kindref="compound">stringpool</ref>*<sp/>sp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>newstr)<sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>is_replaced<sp/>=<sp/><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7aa1e095cc966dbecf6a0d8aad75348d1a" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>pos<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>pos<sp/>&lt;<sp/>(<ref refid="stringpool_8h_1af4c76709286f016c09a7f99a070e6a5e" kindref="member">MAX_DIM_STRING_POOL</ref>))<sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newstr<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>sp-&gt;<ref refid="structstringpool_1ab0cc50c97d44081fab72467d607a9325" kindref="member">positions</ref>[pos]<sp/>==<sp/><ref refid="stringpool_8h_1a80b8e6b0b534147058fcfc1187079064" kindref="member">USED_SLOT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><ref refid="spstring_8c_1a6fd0b8059482b70aa0bc8ee607e3fadb" kindref="member" tooltip="Rimuove e restituisce la stringa str all’interno dello stringpool in posizione pos.">sp_remove_string</ref>(sp,<sp/>pos);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/>is_replaced<sp/>=<sp/><ref refid="spstring_8c_1ace396a34f5bb42619cb81756b2f5b375" kindref="member" tooltip="Aggiunge una string all’interno dello stringpool in posizione pos.">sp_add_string_pos</ref>(sp,<sp/>newstr,<sp/>pos);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_replaced;</highlight></codeline>
<codeline lineno="775"><highlight class="normal">}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="spstring_8c_1a971049db5eca3ef305591d1fcd195a0f" kindref="member" tooltip="Salva il contenuto dello stringpool in un file di testo.">sp_save_to_file</ref>(<ref refid="structstringpool" kindref="compound">stringpool</ref>*<sp/>sp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>fname)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_writed_line<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/>FILE*<sp/>fp;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="spstring_8c_1abb131e3e4d7f496a47d12c1692b75e15" kindref="member" tooltip="Confronta due stringhe e restituisce il relativo valore di verità">sp_strcmp</ref>(&amp;fname,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>!<ref refid="spstring_8c_1abb131e3e4d7f496a47d12c1692b75e15" kindref="member" tooltip="Confronta due stringhe e restituisce il relativo valore di verità">sp_strcmp</ref>(&amp;fname,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="spstring_8c_1a790c017dd9dec0e2b95bf818d10ba005" kindref="member" tooltip="Controlla se esiste già il file e se non esiste lo crea.">_sp_file_create</ref>(&amp;fname)<sp/>==<sp/><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7aa82764c3079aea4e60c80e45befbb839" kindref="member">TRUE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fp<sp/>=<sp/>fopen(fname.<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref>,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">))<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>fprintf(fp,<sp/><ref refid="stringpool_8h_1a4be697a4e0e76af4dc284f700e920678" kindref="member">PATTERN_READ_WRITE_INIT</ref>,<sp/><ref refid="spstring_8c_1a96c3685a91d261df2cb06e9745bdca3f" kindref="member" tooltip="Restituisce il numero di stringhe in sp.">sp_sizeof</ref>(sp));</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>number_writed_line<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="stringpool_8h_1af4c76709286f016c09a7f99a070e6a5e" kindref="member">MAX_DIM_STRING_POOL</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp-&gt;<ref refid="structstringpool_1ab0cc50c97d44081fab72467d607a9325" kindref="member">positions</ref>[i]<sp/>==<sp/><ref refid="stringpool_8h_1a80b8e6b0b534147058fcfc1187079064" kindref="member">USED_SLOT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fp,<sp/><ref refid="stringpool_8h_1a0eb0be35c4612957306af850919f865d" kindref="member">PATTERN_READ_WRITE_LINE</ref>,<sp/>i,</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp-&gt;<ref refid="structstringpool_1af28549aacb7ae1827e1000400381bdbb" kindref="member">strings</ref>[i]-&gt;<ref refid="structstring_1ac06bb82958ec7c45e2838ae575b124ec" kindref="member">allocated_size</ref>,</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp-&gt;<ref refid="structstringpool_1af28549aacb7ae1827e1000400381bdbb" kindref="member">strings</ref>[i]-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref>);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number_writed_line<sp/>=<sp/>number_writed_line<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>number_writed_line<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>number_writed_line;</highlight></codeline>
<codeline lineno="839"><highlight class="normal">}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="spstring_8c_1acc812ec5efe19197bad45658ffefb1fe" kindref="member" tooltip="Carica il contenuto del file di test fname nello o stringpool.">sp_load_from_file</ref>(<ref refid="structstringpool" kindref="compound">stringpool</ref>*<sp/>sp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>fname)<sp/>{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_loaded_line<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_slot;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/>FILE*<sp/>fp;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size_slot;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tmp_slot_start_line<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>calloc(</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/>(<ref refid="stringpool_8h_1a5b593cfbd4a9d757bacf4df235240ce1" kindref="member">MAX_CHAR_STRING_LOAD_FROM_FILE</ref>),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(char));</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tmp_slot_end_line<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>calloc(</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/>(strlen(<ref refid="stringpool_8h_1ac01ee82d919f7fa4aa02d04bf97a9bbd" kindref="member">PATTERN_READ_WRITE_END_LINE_SHORT</ref>)),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>!<ref refid="spstring_8c_1abb131e3e4d7f496a47d12c1692b75e15" kindref="member" tooltip="Confronta due stringhe e restituisce il relativo valore di verità">sp_strcmp</ref>(&amp;fname,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>!<ref refid="spstring_8c_1abb131e3e4d7f496a47d12c1692b75e15" kindref="member" tooltip="Confronta due stringhe e restituisce il relativo valore di verità">sp_strcmp</ref>(&amp;fname,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="spstring_8c_1a126e34dae1b5bfb99d0bbb34b1526dc8" kindref="member" tooltip="Controlla se il file richiesto esiste e ne restituisce il valore di verità">_sp_file_exist</ref>(&amp;fname)<sp/>==<sp/><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7aa82764c3079aea4e60c80e45befbb839" kindref="member">TRUE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fp<sp/>=<sp/>fopen(fname.<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref>,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">))<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>number_loaded_line<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fscanf(fp,<sp/><ref refid="stringpool_8h_1a4be697a4e0e76af4dc284f700e920678" kindref="member">PATTERN_READ_WRITE_INIT</ref>,<sp/>&amp;number_slot)<sp/>!=<sp/>NULL</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>number_slot<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>number_slot;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(feof(fp)<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fscanf(fp,</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stringpool_8h_1a8faae73aa34bbae0ef857459f165cc44" kindref="member">PATTERN_READ_WRITE_START_LINE_SHORT</ref>,</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;pos,<sp/>&amp;size_slot)<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_slot_start_line<sp/>=<sp/>fgets(</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_slot_start_line,<sp/>size_slot<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_slot_end_line</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>fgets(</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_slot_end_line,</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strlen(</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stringpool_8h_1ac01ee82d919f7fa4aa02d04bf97a9bbd" kindref="member">PATTERN_READ_WRITE_END_LINE_SHORT</ref>),</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="spstring_8c_1ace396a34f5bb42619cb81756b2f5b375" kindref="member" tooltip="Aggiunge una string all’interno dello stringpool in posizione pos.">sp_add_string_pos</ref>(sp,</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="spstring_8c_1ac14d3aa446e78a594b506cf2494b7273" kindref="member" tooltip="Crea una string con contenuto pari a quello in ingresso.">sp_new_string</ref>(tmp_slot_start_line),</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number_loaded_line<sp/>=<sp/>number_loaded_line<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;=<sp/><ref refid="stringpool_8h_1af4c76709286f016c09a7f99a070e6a5e" kindref="member">MAX_DIM_STRING_POOL</ref><sp/>&amp;&amp;<sp/>pos<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>number_slot;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>number_loaded_line;</highlight></codeline>
<codeline lineno="950"><highlight class="normal">}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="spstring_8c_1ae3399d635eb3cd9893e079f6eaef6e1f" kindref="member" tooltip="Ordina alfabeticamente gli elementi dello stringpool, applicando l’algoritmo di bubble sort...">bubble_sort</ref>(<ref refid="structstringpool" kindref="compound">stringpool</ref>*<sp/>sp)<sp/>{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ifswitch;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>temp_swap;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>map_array;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="spstring_8c_1aff3ad92cec105f24f415f745ae476ba1" kindref="member" tooltip="Restituisce un valore booleno che indica se lo stringpool è vuoto.">sp_isempty</ref>(sp)<sp/>!=<sp/><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7aa82764c3079aea4e60c80e45befbb839" kindref="member">TRUE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/>map_array<sp/>=<sp/><ref refid="spstring_8c_1a6143c920f51cf353336ee72034f68962" kindref="member">_sp_map_array_stringpool</ref>(sp);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="spstring_8c_1a96c3685a91d261df2cb06e9745bdca3f" kindref="member" tooltip="Restituisce il numero di stringhe in sp.">sp_sizeof</ref>(sp);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/><ref refid="spstring_8c_1a96c3685a91d261df2cb06e9745bdca3f" kindref="member" tooltip="Restituisce il numero di stringhe in sp.">sp_sizeof</ref>(sp)<sp/>-<sp/>1;<sp/>j<sp/>&gt;=<sp/>i;<sp/>j--)<sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>ifswitch<sp/>=<sp/>strcmp(</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp-&gt;<ref refid="structstringpool_1af28549aacb7ae1827e1000400381bdbb" kindref="member">strings</ref>[*(map_array<sp/>+<sp/>j)]-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref>,</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp-&gt;<ref refid="structstringpool_1af28549aacb7ae1827e1000400381bdbb" kindref="member">strings</ref>[(*(map_array<sp/>+<sp/>j<sp/>-<sp/>1))]-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref>);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ifswitch<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp_swap<sp/>=<sp/><ref refid="spstring_8c_1a0b0458114373e76ff2c48696bcae2782" kindref="member" tooltip="Restituisce il puntatore alla stringa str che occupa la posizione pos all’interno dello stringpool...">sp_get_string</ref>(sp,<sp/>*(map_array<sp/>+<sp/>j));</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="spstring_8c_1a465c42024674ec91ddb1158ee58c3466" kindref="member" tooltip="Sostituisce la stringa all’interno dello stringpool in posizione pos, rimpiazzandola con str...">sp_replace_string</ref>(sp,<sp/>*(map_array<sp/>+<sp/>j),</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp-&gt;<ref refid="structstringpool_1af28549aacb7ae1827e1000400381bdbb" kindref="member">strings</ref>[*(map_array<sp/>+<sp/>j<sp/>-<sp/>1)]);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="spstring_8c_1a465c42024674ec91ddb1158ee58c3466" kindref="member" tooltip="Sostituisce la stringa all’interno dello stringpool in posizione pos, rimpiazzandola con str...">sp_replace_string</ref>(sp,<sp/>(*(map_array<sp/>+<sp/>j<sp/>-<sp/>1)),<sp/>temp_swap);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="spstring_8c_1a254f5e6ad18c821b31437d10a923cc83" kindref="member" tooltip="Cerca la stringa str all’interno dello stringpool ordinato attraverso l’algoritmo di ricerca binaria...">bin_search</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structstringpool" kindref="compound">stringpool</ref>*<sp/>sp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iffound<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>str_cmp<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mid,<sp/>low,<sp/>hight,<sp/>size_sp;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>map_array;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>(&amp;str)<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/>size_sp<sp/>=<sp/><ref refid="spstring_8c_1a96c3685a91d261df2cb06e9745bdca3f" kindref="member" tooltip="Restituisce il numero di stringhe in sp.">sp_sizeof</ref>(sp);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size_sp<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/>map_array<sp/>=<sp/><ref refid="spstring_8c_1a6143c920f51cf353336ee72034f68962" kindref="member">_sp_map_array_stringpool</ref>(sp);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/>hight<sp/>=<sp/>size_sp;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/>low<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(str_cmp<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>i<sp/>!=<sp/>size_sp)<sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>mid<sp/>=<sp/>(low<sp/>+<sp/>hight)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/>str_cmp<sp/>=<sp/>strcmp(str.<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref>,</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sp-&gt;<ref refid="structstringpool_1af28549aacb7ae1827e1000400381bdbb" kindref="member">strings</ref>[*(map_array<sp/>+<sp/>mid)]-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref>);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str_cmp<sp/>&gt;<sp/>0<sp/>||<sp/><ref refid="spstring_8c_1abb131e3e4d7f496a47d12c1692b75e15" kindref="member" tooltip="Confronta due stringhe e restituisce il relativo valore di verità">sp_strcmp</ref>(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7aa82764c3079aea4e60c80e45befbb839" kindref="member">TRUE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>low<sp/>=<sp/>mid<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str_cmp<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>hight<sp/>=<sp/>mid<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>==<sp/><ref refid="spstring_8c_1a96c3685a91d261df2cb06e9745bdca3f" kindref="member" tooltip="Restituisce il numero di stringhe in sp.">sp_sizeof</ref>(sp)<sp/>&amp;&amp;<sp/>str_cmp<sp/>!=<sp/>0)<sp/>||<sp/>(i<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>str_cmp<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/>iffound<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/>iffound<sp/>=<sp/>*(map_array<sp/>+<sp/>mid);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iffound;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="spstring_8c_1ac0204ece57f1cdce074fe7af7b7419f1" kindref="member" tooltip="Cerca la stringa str all’interno dello stringpool e ne restituisce la posizione, nel caso sia presente...">sp_find_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structstringpool" kindref="compound">stringpool</ref>*<sp/>sp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>position_find<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>strcmp_result;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>str<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="stringpool_8h_1af4c76709286f016c09a7f99a070e6a5e" kindref="member">MAX_DIM_STRING_POOL</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp-&gt;<ref refid="structstringpool_1ab0cc50c97d44081fab72467d607a9325" kindref="member">positions</ref>[i]<sp/>==<sp/><ref refid="stringpool_8h_1a80b8e6b0b534147058fcfc1187079064" kindref="member">USED_SLOT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>strcmp_result<sp/>=<sp/>strcmp(str-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref>,</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sp-&gt;<ref refid="structstringpool_1af28549aacb7ae1827e1000400381bdbb" kindref="member">strings</ref>[i]-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref>);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp_result<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>position_find<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/><ref refid="stringpool_8h_1af4c76709286f016c09a7f99a070e6a5e" kindref="member">MAX_DIM_STRING_POOL</ref>;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>position_find;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/><ref refid="spstring_8c_1a126e34dae1b5bfb99d0bbb34b1526dc8" kindref="member" tooltip="Controlla se il file richiesto esiste e ne restituisce il valore di verità">_sp_file_exist</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>fname)<sp/>{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>ifexist<sp/>=<sp/><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7aa1e095cc966dbecf6a0d8aad75348d1a" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/>FILE*<sp/>fp;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fname<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fp<sp/>=<sp/>fopen(fname-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref>,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/>ifexist<sp/>=<sp/><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7aa1e095cc966dbecf6a0d8aad75348d1a" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/>ifexist<sp/>=<sp/><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7aa82764c3079aea4e60c80e45befbb839" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ifexist;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/><ref refid="spstring_8c_1a790c017dd9dec0e2b95bf818d10ba005" kindref="member" tooltip="Controlla se esiste già il file e se non esiste lo crea.">_sp_file_create</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>fname)<sp/>{</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>ifcreated<sp/>=<sp/><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7aa1e095cc966dbecf6a0d8aad75348d1a" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/>FILE*<sp/>fp;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fname<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="spstring_8c_1a126e34dae1b5bfb99d0bbb34b1526dc8" kindref="member" tooltip="Controlla se il file richiesto esiste e ne restituisce il valore di verità">_sp_file_exist</ref>(fname)<sp/>==<sp/><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7aa1e095cc966dbecf6a0d8aad75348d1a" kindref="member">FALSE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fp<sp/>=<sp/>fopen(fname-&gt;<ref refid="structstring_1acd450648098ba3eaf4db79064af67051" kindref="member">char_array</ref>,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>ifcreated<sp/>=<sp/><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7aa1e095cc966dbecf6a0d8aad75348d1a" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>ifcreated<sp/>=<sp/><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7aa82764c3079aea4e60c80e45befbb839" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/>ifcreated<sp/>=<sp/><ref refid="bool_8h_1a56a087515036f9d49426777667d056a7aa82764c3079aea4e60c80e45befbb839" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ifcreated;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><ref refid="spstring_8c_1a6143c920f51cf353336ee72034f68962" kindref="member">_sp_map_array_stringpool</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structstringpool" kindref="compound">stringpool</ref>*<sp/>sp)<sp/>{</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>array_map<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>map_pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/>array_map<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)<sp/>calloc((<ref refid="spstring_8c_1a96c3685a91d261df2cb06e9745bdca3f" kindref="member" tooltip="Restituisce il numero di stringhe in sp.">sp_sizeof</ref>(sp)),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int));</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="stringpool_8h_1af4c76709286f016c09a7f99a070e6a5e" kindref="member">MAX_DIM_STRING_POOL</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp-&gt;<ref refid="structstringpool_1ab0cc50c97d44081fab72467d607a9325" kindref="member">positions</ref>[i]<sp/>==<sp/><ref refid="stringpool_8h_1a80b8e6b0b534147058fcfc1187079064" kindref="member">USED_SLOT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>*(array_map<sp/>+<sp/>map_pos)<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/>map_pos<sp/>=<sp/>map_pos<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array_map;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/macbook/Documents/workspace-eclipse/Library/spstring.c"/>
  </compounddef>
</doxygen>
